import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Scanner;

public class HTTP {
    public static void main(String[] args) throws IOException {
        //http请求 = 请求行+请求头们+可选的请求体
        //请求行 = 方法+URL+版本
        //GET / HTTP/1.0\r\n
        //\r\n
        String request = "GET / HTTP/1.0\r\n"
                +"\r\n";
        Socket socket = new Socket("182.254.132.183",8080);
        InputStream is = socket.getInputStream();//获取对方发送过来的数据
        OutputStream os = socket.getOutputStream();//获取对方的数据

        //发送
        byte[] message = request.getBytes("utf-8");
        os.write(message);
        os.flush();

        //接受
        Scanner scanner = new Scanner(is, "UTF-8");
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            System.out.println(line);
        }

        // 关闭
        socket.close();
    }
}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

public class HTTPServer {
    public static void main(String[] args) throws IOException {
        String body =   "<!DOCTYPE html>"
                        + "<html>"
                        + "<head>"
                        + "<title>网页</title>"
                        + "<meta charset='utf-8'>"
                        + "</head>"
                        + "<body>"
                        + "<h1>首页</h1>"
                        + "<p>hello</p>"
                        + "</body>"
                        + "</html>";
        String response = "HTTP/1.0 200 OK\r\n"
                        + "Content-Type: text/html; charset=utf-8\r\n"
                        + "Content-Length: 146\r\n"
                        + "\r\n"
                        + body;

        ServerSocket serverSocket = new ServerSocket(8888);
        // 可以不断的进行 请求-响应周期
        while (true) {
            // 开始一次通信 = 读取请求 + 发送响应
            Socket socket = serverSocket.accept();
            InputStream is = socket.getInputStream();
            OutputStream os = socket.getOutputStream();

            // 读取请求
            Scanner scanner = new Scanner(is, "UTF-8");
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println(line);
                if (line.isEmpty()) {
                    // 读取到空行，代表请求结束
                    break;
                }
            }

            // 发送响应
            byte[] bytes = response.getBytes("UTF-8");
            os.write(bytes);
            os.flush();

            socket.close();
            // 结束一次通信
        }
    }
}
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class TCPServer {
    public static void main(String[] args) throws IOException {
        ExecutorService executorService = Executors.newCachedThreadPool();
        ServerSocket serverSocket = new ServerSocket(8888);
        // serverSocket 对应的一个“连接”的状态是 LISTEN
        while (true){
            Socket socket = serverSocket.accept();
            // socket 对应连接已经是 ESTABLISHED 状态
            System.out.println("有一条连接建立");

            executorService.execute(()->{

                try {
                    synchronized (TCPServer.class){
                        TCPServer.class.wait();
                    }

                    socket.close();
                } catch (IOException | InterruptedException e) {

                }
            });

        }

    }
}
import java.io.IOException;
import java.net.Socket;

public class TCPClient {
    public static void main(String[] args) throws IOException {
        // 连接是 CLOSED 状态，抽象的
        Socket socket = new Socket("182.254.132.183", 8888);
        // 已经是 ESTABLISHED 状态

        socket.getInputStream().read();
    }
}